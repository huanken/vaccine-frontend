{"version":3,"sources":["redux/selectors/locationSelector.js","pages/location/CustomSearch.js","api/LocationApi.js","redux/actions/locationAction.js","pages/location/Location.js"],"names":["locationSelector","state","location","selectListLocationSelector","createSelector","locations","selectPageSelector","page","selectSizeSelector","size","selectTotalElementSelector","totalElement","selectSearchSelector","search","selectSelectedRowsSelector","isLoading","selectedRows","selectSortFieldSelector","sortField","selectSortTypeSelector","sortType","selectListLocation","selectPage","selectSize","selectTotalElement","selectSearch","selectSelectedRows","selectSortField","selectSortType","connect","props","key","Date","parse","enableReinitialize","initialValues","onSubmit","values","onSearch","Row","style","alignItems","Col","xs","bsSize","type","name","placeholder","component","ReactstrapInput","InputGroupAddon","addonType","color","Button","onClick","url","api","getAll","undefined","requestParams","sort","Api","get","params","create","locationName","body","post","getById","id","deleteById","delete","update","put","listLocationAction","types","payload","getListLocationAction","dispatch","a","LocationApi","json","details","totalElements","console","log","updateSelectedRowsAction","showSuccessNotification","title","message","toastr","success","timeOut","showCloseButton","progressBar","position","showWrongNotification","error","getListLocations","useEffect","handleTableChange","sizePerPage","sortOrder","searchText","handleOnSelect","row","isSelect","selected","filter","x","handleOnSelectAll","rows","ids","map","r","refreshForm","useState","isOpenModalCreate","setOpenModalCreate","updateLocationInfo","setUpdateLocationInfo","updateLocation","data","deleteLocation","window","confirm","deleteLocations","length","forEach","element","tableColumns","dataField","text","align","headerStyle","textAlign","width","formatter","cell","rowIndex","className","Container","fluid","Card","CardBody","keyField","columns","toolkitprops","searchProps","paddingBottom","baseProps","bootstrap4","striped","hover","bordered","remote","order","pagination","paginationFactory","totalSize","nextPageText","prePageText","withFirstAndLast","alwaysShowAllBtns","hideSizePerPage","selectRow","mode","clickToSelect","onSelect","onSelectAll","onTableChange","Modal","isOpen","validationSchema","Yup","required","max","min","isSubmitting","ModalHeader","ModalBody","ModalFooter","disabled"],"mappings":"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","file":"static/js/6.fc7a6c2e.chunk.js","sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\n/** Selector **/\r\nconst locationSelector = (state) => state.location;\r\n\r\nconst selectListLocationSelector = createSelector(\r\n    locationSelector,\r\n    state => state.locations);\r\n\r\nconst selectPageSelector = createSelector(\r\n    locationSelector,\r\n    state => state.page);\r\n\r\nconst selectSizeSelector = createSelector(\r\n    locationSelector,\r\n    state => state.size);\r\n\r\nconst selectTotalElementSelector = createSelector(\r\n    locationSelector,\r\n    state => state.totalElement);\r\n\r\nconst selectSearchSelector = createSelector(\r\n    locationSelector,\r\n    state => state.search);\r\n\r\nconst selectLoadingSelector = createSelector(\r\n    locationSelector,\r\n    state => state.isLoading);\r\n\r\nconst selectSelectedRowsSelector = createSelector(\r\n    locationSelector,\r\n    state => state.selectedRows);\r\n\r\nconst selectSortFieldSelector = createSelector(\r\n    locationSelector,\r\n    state => state.sortField);\r\n\r\nconst selectSortTypeSelector = createSelector(\r\n    locationSelector,\r\n    state => state.sortType);\r\n\r\n/** function */\r\nexport const selectListLocation = (state) => {\r\n    return selectListLocationSelector(state);\r\n}\r\n\r\nexport const selectPage = (state) => {\r\n    return selectPageSelector(state);\r\n}\r\n\r\nexport const selectSize = (state) => {\r\n    return selectSizeSelector(state);\r\n}\r\n\r\nexport const selectTotalElement = (state) => {\r\n    return selectTotalElementSelector(state);\r\n}\r\n\r\n\r\nexport const selectSearch = (state) => {\r\n    return selectSearchSelector(state);\r\n}\r\n\r\nexport const selectSelectedRows = (state) => {\r\n    return selectSelectedRowsSelector(state);\r\n}\r\n\r\nexport const selectLoading = (state) => {\r\n    return selectLoadingSelector(state);\r\n}\r\n\r\nexport const selectSortField = (state) => {\r\n    return selectSortFieldSelector(state);\r\n}\r\n\r\nexport const selectSortType = (state) => {\r\n    return selectSortTypeSelector(state);\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroupAddon\r\n} from \"reactstrap\";\r\nimport { selectSearch } from \"../../redux/selectors/locationSelector\";\r\nimport { connect } from \"react-redux\";\r\nimport { Formik, FastField, Form } from 'formik';\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\n\r\nconst CustomSearch = (props) => {\r\n\r\n    const resetSearch = () => {\r\n        props.onSearch(\"\");\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            key={Date.parse(new Date())}    // fix bug: not-re-render when initialValues changing\r\n            enableReinitialize\r\n            initialValues={\r\n                {\r\n                    search: props.search ? props.search : \"\"\r\n                }\r\n            }\r\n            onSubmit={\r\n                values => {\r\n                    props.onSearch(values.search);\r\n                }\r\n            }\r\n        >\r\n            <Form>\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                    <Col xs=\"auto\">\r\n                        <FastField\r\n                            bsSize=\"lg\"\r\n                            type=\"text\"\r\n                            name=\"search\"\r\n                            placeholder=\"Search Location Info\"\r\n                            component={ReactstrapInput}\r\n                        />\r\n                    </Col>\r\n                    <Col xs=\"auto\">\r\n                        <InputGroupAddon addonType=\"append\" color=\"primary\">\r\n                            <Button type=\"submit\">Search!</Button>\r\n                        </InputGroupAddon>                  \r\n                    </Col>\r\n                    <Col xs=\"auto\">                   \r\n                        <InputGroupAddon addonType=\"append\" color=\"primary\">\r\n                            <Button type=\"submit\" color=\"danger\" onClick = {resetSearch}>Reset Search!</Button>\r\n                        </InputGroupAddon>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n    return {\r\n        search: selectSearch(state)\r\n    };\r\n};\r\n\r\nexport default connect(mapGlobalStateToProps)(CustomSearch);","import Api from './Api';\r\n\r\nconst url = \"/locations\";\r\n\r\nconst getAll = (page, size,sortField, sortType, search) => {    \r\n     // default parameters\r\n     if (sortField === null || sortField === undefined || sortType === null || sortType === undefined) {\r\n        sortField = \"id\";\r\n        sortType = \"asc\";\r\n    }\r\n\r\n    const requestParams = {\r\n        page,\r\n        size,\r\n        sort: `${sortField},${sortType}`,\r\n        search,\r\n    }\r\n    return Api.get(`${url}`, {params: requestParams});\r\n};\r\n\r\n\r\nconst create = (locationName) => {\r\n    const body = {\r\n        locationName\r\n    }\r\n    return Api.post(url, body);\r\n};\r\n\r\nconst getById = (id) => {\r\n    return Api.get(`${url}/${id}`);\r\n};\r\n\r\nconst deleteById = (id) => {\r\n    return Api.delete(`${url}/${id}`);\r\n};\r\n\r\nconst update = (id, locationName) => {\r\n    const body = {\r\n        locationName\r\n    }\r\n    return Api.put(`${url}/${id}`, body);\r\n};\r\n\r\n\r\n// export\r\nconst api = { getAll ,create , getById,deleteById,update }\r\nexport default api;","import * as types from \"../constants\";\r\nimport LocationApi from '../../api/LocationApi';\r\n\r\nconst listLocationAction = (locations, page, totalElement, sortField,sortType,  search) => {\r\n  return {\r\n    type: types.GET_LIST_LOCATIONS,\r\n    payload: {\r\n      locations,\r\n      page,\r\n      totalElement,\r\n      sortField,\r\n      sortType,\r\n      search, \r\n    }\r\n  };\r\n}\r\n\r\nexport const getListLocationAction = (page, size,sortField, sortType, search,) => {\r\n  return async dispatch => {\r\n    try {\r\n      const json = await LocationApi.getAll(page, size,sortField, sortType, search,);\r\n      const locations = json.details.locations;\r\n      const totalElement = json.details.totalElements;\r\n      dispatch(listLocationAction(locations, page, totalElement));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateSelectedRowsAction = (selectedRows) => {\r\n  return {\r\n    type: types.GET_LIST_LOCATION_SELECTED_ROWS,\r\n    payload: selectedRows\r\n  };\r\n}","import React, { useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Button,\r\n  Modal\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport filterFactory, { customFilter } from 'react-bootstrap-table2-filter';\r\nimport CustomSearch from './CustomSearch';\r\nimport * as Icon from \"react-feather\";\r\nimport { useState } from \"react\";\r\nimport { getListLocationAction, updateSelectedRowsAction } from '../../redux/actions/locationAction';\r\nimport { selectListLocation, selectPage, selectSize, selectSortField, selectSortType, selectTotalElement, selectSelectedRows } from '../../redux/selectors/locationSelector';\r\nimport { Edit2 } from \"react-feather\";\r\nimport LocationApi from '../../api/LocationApi'\r\nimport { toastr } from \"react-redux-toastr\";\r\nimport { Formik, FastField, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\n\r\nconst Location = (props) => {\r\n  const showSuccessNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 2500,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.success(title, message, options);\r\n  }\r\n\r\n  const showWrongNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 2500,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.error(title, message, options);\r\n  }\r\n\r\n  const getListLocations = props.getListLocationAction;\r\n  const size = props.size;\r\n  useEffect(() => {\r\n    getListLocations(1, size);\r\n  }, [getListLocations, size]);\r\n\r\n  const actionFormatter = (cell, row, rowIndex) => {\r\n    return (\r\n      <>\r\n        <Edit2 className=\"align-middle mr-2\" size={18}\r\n          onClick={() => updateLocation(row.id)}\r\n        />\r\n        {\" \"}\r\n        <Icon.Trash className=\"align-middle mr-2\" size={18}\r\n           onClick={() => deleteLocation(row.id)}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const handleTableChange = (type, { page, sizePerPage, sortField, sortOrder, searchText }) => {\r\n    getListLocations(page, sizePerPage, sortField, sortOrder, searchText);\r\n  }\r\n\r\n  const handleOnSelect = (row, isSelect) => {\r\n    let selected = props.selectedRows;\r\n    if (isSelect) {\r\n      selected = [...selected, row.id]\r\n    } else {\r\n      selected = selected.filter(x => x !== row.id)\r\n    }\r\n    console.log(selected);\r\n    props.updateSelectedRowsAction(selected)\r\n  }\r\n  const handleOnSelectAll = (isSelect, rows) => {\r\n    const ids = rows.map(r => r.id);\r\n    let selected = [];\r\n    if (isSelect) {\r\n      selected = ids;\r\n    }\r\n    props.updateSelectedRowsAction(selected);\r\n  }\r\n\r\n  // Refresh form \r\n  const refreshForm = () => {\r\n    handleTableChange(\r\n      null,\r\n      {\r\n        page: 1,\r\n        sizePerPage: size,\r\n        sortField: \"id\",\r\n        sortOrder: \"asc\",\r\n        searchText: \"\",\r\n      }\r\n    );\r\n    props.updateSelectedRowsAction([]);\r\n  }\r\n\r\n  // create\r\n  const [isOpenModalCreate, setOpenModalCreate] = useState(false);\r\n  // update\r\n  const [updateLocationInfo, setUpdateLocationInfo] = useState({});\r\n  const updateLocation = async (id) => {\r\n    setOpenModalCreate(true);\r\n    const data = await LocationApi.getById(id);\r\n    console.log(updateLocationInfo);\r\n    setUpdateLocationInfo(data.details.location);\r\n  }\r\n  // delete \r\n  const deleteLocation = async (id) => {\r\n    let result = window.confirm(\"Do you want to delete this ?\");\r\n    if (result) {\r\n      if (id === null || id === undefined) {\r\n        showWrongNotification(\r\n          \"Delete Location\",\r\n          \"Sorry, Cann't Delete\"\r\n        );\r\n      } else {\r\n        try {\r\n          await LocationApi.deleteById(id);\r\n             // show notification\r\n          showSuccessNotification(\r\n            \"Delete Location\",\r\n            \"Delete Location Successfully!\");\r\n          // reload group page\r\n          refreshForm();\r\n          } catch (error) {\r\n            showWrongNotification(\r\n              \"Delete Location\",\r\n              error.data.message\r\n            );\r\n          }\r\n      }\r\n    }\r\n    refreshForm();\r\n  }\r\n  const deleteLocations = async () => {\r\n    let result = window.confirm(\"Do you want to delete all selected rows ?\");\r\n    if (result) {\r\n      if (props.selectedRows === null || props.selectedRows === undefined || props.selectedRows.length === 0) {\r\n        showWrongNotification(\r\n          \"Delete Location\",\r\n          \"You have not selected the location!\"\r\n        );\r\n      } else {\r\n        await props.selectedRows.forEach(element => {\r\n          LocationApi.deleteById(element);\r\n          console.log(\"Xóa phần tử thứ \" + element);\r\n        });\r\n        // show notification\r\n        showSuccessNotification(\r\n          \"Delete Location\",\r\n          \"Delete Location Successfully!\");\r\n        // reload vaccine page\r\n        refreshForm();\r\n      }\r\n    }\r\n    refreshForm();\r\n  }\r\n\r\n  const tableColumns = [\r\n    {\r\n      dataField: \"id\",\r\n      text: \"Id\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"name\",\r\n      text: \"Name\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"actions\",\r\n      text: \"Actions\",\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n      headerStyle: () => {\r\n        return { textAlign: 'center', width: '90px' };\r\n      },\r\n      formatter: actionFormatter\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Location Management</h1>\r\n      <Card>\r\n        <CardBody>\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={props.locations}\r\n            columns={tableColumns}\r\n            search\r\n          >\r\n            {\r\n              toolkitprops => (\r\n                <>\r\n                  <Row style={{ alignItems: \"flex-end\" }}>\r\n                    <Col xs=\"9\">\r\n                      <CustomSearch {...toolkitprops.searchProps} />\r\n                    </Col>\r\n                    <Col xs=\"3\" style={{ paddingBottom: 20 }}>\r\n                      <div className=\"float-right pull-right\">\r\n                        {/* <Icon.Filter className=\"align-middle mr-3\" color=\"black\" size={25} /> */}\r\n                        <Icon.RefreshCcw className=\"align-middle mr-3\" color=\"black\" size={25} onClick={refreshForm} />\r\n                        <Icon.PlusCircle className=\"align-middle mr-3\" color=\"black\" size={25} onClick={() => setOpenModalCreate(true)} />\r\n                        <Icon.Trash2 className=\"align-middle mr-3\" color=\"black\" size={25} onClick={deleteLocations}/>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                  <BootstrapTable\r\n                    {...toolkitprops.baseProps}\r\n                    bootstrap4\r\n                    striped\r\n                    hover\r\n                    bordered\r\n                    remote\r\n                    sort={{\r\n                      dataField: props.sortField,\r\n                      order: props.sortType\r\n                    }}\r\n                    pagination={paginationFactory({\r\n                      page: props.page,\r\n                      totalSize: props.totalElement,\r\n                      sizePerPage: props.size,\r\n\r\n                      nextPageText: '>',\r\n                      prePageText: '<',\r\n                      withFirstAndLast: true,\r\n                      alwaysShowAllBtns: true,\r\n\r\n                      hideSizePerPage: true,\r\n\r\n                    })}\r\n                    selectRow={{\r\n                      mode: 'checkbox',\r\n                      clickToSelect: true,\r\n                      selected: props.selectedRows,\r\n                      onSelect: handleOnSelect,\r\n                      onSelectAll: handleOnSelectAll\r\n                    }}\r\n                    onTableChange={handleTableChange}\r\n                  />\r\n                </>\r\n              )\r\n            }\r\n          </ToolkitProvider>\r\n        </CardBody>\r\n      </Card>\r\n\r\n      < Modal isOpen={isOpenModalCreate} >\r\n        <Formik\r\n          enableReinitialize\r\n          initialValues={\r\n            {\r\n              name: updateLocationInfo ? updateLocationInfo.name : '',\r\n            }\r\n          }\r\n          validationSchema={\r\n            Yup.object({\r\n              name: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 6 to 50 characters')\r\n                .min(6, 'Must be between 6 to 50 characters')\r\n            })\r\n          }\r\n          onSubmit={\r\n            async values => {\r\n              console.log(values);\r\n              if (updateLocationInfo) {\r\n                try {\r\n                  await LocationApi.update(updateLocationInfo.id, values.name);\r\n                  setOpenModalCreate(false);\r\n                  // show notification\r\n                  showSuccessNotification(\r\n                    \"Update Location\",\r\n                    \"Update Location Successfully!\");\r\n                  // reload Location page\r\n                  refreshForm();\r\n                  setUpdateLocationInfo(null);\r\n                } catch (error) {\r\n                  showWrongNotification(\r\n                    \"Update Error\",\r\n                    error.data.message);\r\n                  console.log(error);\r\n                  setOpenModalCreate(false);\r\n                }\r\n              } else {\r\n                try {\r\n                  await LocationApi.create(values.name);\r\n                  setOpenModalCreate(false);\r\n                  // show notification\r\n                  showSuccessNotification(\r\n                    \"Create Location\",\r\n                    \"Create Location Successfully!\");\r\n                  // reload Location page\r\n                  refreshForm();\r\n                  setUpdateLocationInfo(null);\r\n                } catch (error) {\r\n                  showWrongNotification(\r\n                    \"Create Error\",\r\n                    error.data.message);\r\n                  console.log(error);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              {/* header */}\r\n              <ModalHeader>\r\n                Create New Location\r\n              </ModalHeader>\r\n              {/* body */}\r\n              <ModalBody>\r\n                {/* Name */}\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                  <Col xs=\"auto\">\r\n                    Location Name:\r\n                  </Col>\r\n                  <Col>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter Location Name\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </ModalBody>\r\n              {/* footer */}\r\n              <ModalFooter>\r\n                {/* resend */}\r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"primary\"\r\n                  disabled={isSubmitting}\r\n                >\r\n                  Save\r\n                </Button>\r\n                {\" \"}\r\n                {/* login */}\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setUpdateLocationInfo(null);\r\n                    setOpenModalCreate(false);\r\n                  }\r\n                  }\r\n                >\r\n                  Close\r\n                </Button>\r\n              </ModalFooter>\r\n            </Form>\r\n          )}\r\n        </Formik >\r\n      </Modal>\r\n\r\n    </Container >\r\n  )\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n  return {\r\n    locations: selectListLocation(state),\r\n    page: selectPage(state),\r\n    size: selectSize(state),\r\n    sortField: selectSortField(state),\r\n    sortType: selectSortType(state),\r\n    totalElement: selectTotalElement(state),\r\n    selectedRows: selectSelectedRows(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapGlobalStateToProps, { getListLocationAction, updateSelectedRowsAction })(Location);"],"sourceRoot":""}