{"version":3,"sources":["redux/actions/userActions.js","redux/selectors/userSelector.js","pages/user/CustomSearch.js","pages/user/User.js"],"names":["listUserAction","users","page","totalElement","sortField","sortType","search","type","types","payload","userSelector","state","user","selectListUserSelector","createSelector","selectPageSelector","selectSizeSelector","size","selectTotalElementSelector","selectSearchSelector","selectSelectedRowsSelector","isLoading","selectedRows","selectSortFieldSelector","selectSortTypeSelector","selectListUser","selectPage","selectSize","selectTotalElement","selectSearch","selectSelectedRows","selectSortField","selectSortType","connect","props","key","Date","parse","enableReinitialize","initialValues","onSubmit","values","onSearch","Row","style","alignItems","Col","xs","bsSize","name","placeholder","component","ReactstrapInput","InputGroupAddon","addonType","color","Button","onClick","getListUserAction","dispatch","a","UserApi","getAll","json","details","totalElements","console","log","updateSelectedRowsAction","getListUsers","showSuccessNotification","title","message","toastr","success","timeOut","showCloseButton","progressBar","position","showWrongNotification","error","useEffect","useState","isOpenModalCreate","setOpenModalCreate","updateUserInfo","setUpdateUserInfo","isOpenModalUpdate","setOpenModalUpdate","updateUser","userID","getById","data","deleteUser","id","window","confirm","undefined","deleteById","refreshForm","deleteUsers","length","forEach","element","handleOnSelect","row","isSelect","selected","filter","x","handleOnSelectAll","rows","ids","map","r","tableColumns","dataField","text","sort","align","headerStyle","textAlign","width","formatter","cell","rowIndex","className","handleTableChange","sizePerPage","sortOrder","searchText","Container","fluid","Card","CardBody","keyField","columns","toolkitprops","searchProps","paddingBottom","baseProps","bootstrap4","striped","hover","bordered","remote","order","pagination","paginationFactory","totalSize","nextPageText","prePageText","withFirstAndLast","alwaysShowAllBtns","hideSizePerPage","selectRow","mode","clickToSelect","onSelect","onSelectAll","onTableChange","Modal","isOpen","maxWidth","username","password","fullname","age","address","phone","email","citizenId","prioritize","validationSchema","Yup","required","max","min","matches","create","typeAccount","isSubmitting","ModalHeader","ModalBody","height","md","paddingLeft","as","value","ModalFooter","disabled","update","paddingTop"],"mappings":"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","file":"static/js/7.aa771371.chunk.js","sourcesContent":["import * as types from \"../constants\";\r\nimport UserApi from '../../api/UserApi';\r\n\r\nconst listUserAction = (users, page, totalElement, sortField,sortType,  search) => {\r\n  return {\r\n    type: types.GET_LIST_USER,\r\n    payload: {\r\n      users,\r\n      page,\r\n      totalElement,\r\n      sortField,\r\n      sortType,\r\n      search, \r\n    }\r\n  };\r\n}\r\n\r\nexport const getListUserAction = (page, size,sortField, sortType, search, ) => {\r\n  return async dispatch => {\r\n    try {\r\n      const json = await UserApi.getAll(page, size,sortField, sortType, search);\r\n      const users = json.details.users;\r\n      const totalElement = json.details.totalElements;\r\n      dispatch(listUserAction(users, page, totalElement));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n}\r\nexport const updateSelectedRowsAction = (selectedRows) => {\r\n  return {\r\n    type: types.GET_LIST_USER_SELECTED_ROWS,\r\n    payload: selectedRows\r\n  };\r\n}","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\n/** Selector **/\r\nconst userSelector = (state) => state.user;\r\n\r\nconst selectListUserSelector = createSelector(\r\n    userSelector,\r\n    state => state.users);\r\n\r\nconst selectPageSelector = createSelector(\r\n    userSelector,\r\n    state => state.page);\r\n\r\nconst selectSizeSelector = createSelector(\r\n    userSelector,\r\n    state => state.size);\r\n\r\nconst selectTotalElementSelector = createSelector(\r\n    userSelector,\r\n    state => state.totalElement);\r\n\r\nconst selectSearchSelector = createSelector(\r\n    userSelector,\r\n    state => state.search);\r\n\r\nconst selectLoadingSelector = createSelector(\r\n    userSelector,\r\n    state => state.isLoading);\r\n\r\nconst selectSelectedRowsSelector = createSelector(\r\n    userSelector,\r\n    state => state.selectedRows);\r\n\r\nconst selectSortFieldSelector = createSelector(\r\n    userSelector,\r\n    state => state.sortField);\r\n\r\nconst selectSortTypeSelector = createSelector(\r\n    userSelector,\r\n    state => state.sortType);\r\n\r\n/** function */\r\nexport const selectListUser = (state) => {\r\n    return selectListUserSelector(state);\r\n}\r\n\r\nexport const selectPage = (state) => {\r\n    return selectPageSelector(state);\r\n}\r\n\r\nexport const selectSize = (state) => {\r\n    return selectSizeSelector(state);\r\n}\r\n\r\nexport const selectTotalElement = (state) => {\r\n    return selectTotalElementSelector(state);\r\n}\r\n\r\n\r\nexport const selectSearch = (state) => {\r\n    return selectSearchSelector(state);\r\n}\r\n\r\nexport const selectSelectedRows = (state) => {\r\n    return selectSelectedRowsSelector(state);\r\n}\r\n\r\nexport const selectLoading = (state) => {\r\n    return selectLoadingSelector(state);\r\n}\r\n\r\nexport const selectSortField = (state) => {\r\n    return selectSortFieldSelector(state);\r\n}\r\n\r\nexport const selectSortType = (state) => {\r\n    return selectSortTypeSelector(state);\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroupAddon\r\n} from \"reactstrap\";\r\nimport { selectSearch } from \"../../redux/selectors/userSelector\";\r\nimport { connect } from \"react-redux\";\r\nimport { Formik, FastField, Form } from 'formik';\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\n\r\nconst CustomSearch = (props) => {\r\n\r\n    const resetSearch = () => {\r\n        props.onSearch(\"\");\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            key={Date.parse(new Date())}    // fix bug: not-re-render when initialValues changing\r\n            enableReinitialize\r\n            initialValues={\r\n                {\r\n                    search: props.search ? props.search : \"\"\r\n                }\r\n            }\r\n            onSubmit={\r\n                values => {\r\n                    props.onSearch(values.search);\r\n                }\r\n            }\r\n        >\r\n            <Form>\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                    <Col xs=\"auto\">\r\n                        <FastField\r\n                            bsSize=\"lg\"\r\n                            type=\"text\"\r\n                            name=\"search\"\r\n                            placeholder=\"Search User Info\"\r\n                            component={ReactstrapInput}\r\n                        />\r\n                    </Col>\r\n                    <Col xs=\"auto\">\r\n                        <InputGroupAddon addonType=\"append\" color=\"primary\">\r\n                            <Button type=\"submit\">Search!</Button>\r\n                        </InputGroupAddon>                  \r\n                    </Col>\r\n                    <Col xs=\"auto\">                   \r\n                        <InputGroupAddon addonType=\"append\" color=\"primary\">\r\n                            <Button type=\"submit\" color=\"danger\" onClick = {resetSearch}>Reset Search!</Button>\r\n                        </InputGroupAddon>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n    return {\r\n        search: selectSearch(state)\r\n    };\r\n};\r\n\r\nexport default connect(mapGlobalStateToProps)(CustomSearch);","import React, { useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Button,\r\n  Modal,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from \"reactstrap\";\r\nimport { getListUserAction, updateSelectedRowsAction } from '../../redux/actions/userActions';\r\nimport { connect } from \"react-redux\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport { selectListUser, selectPage, selectSize, selectSortField, selectSortType, selectTotalElement, selectSelectedRows } from '../../redux/selectors/userSelector';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport filterFactory, { customFilter } from 'react-bootstrap-table2-filter';\r\nimport CustomSearch from './CustomSearch';\r\nimport * as Icon from \"react-feather\";\r\nimport { useState } from \"react\";\r\nimport { toastr } from \"react-redux-toastr\";\r\nimport { Edit2 } from \"react-feather\";\r\nimport { Formik, FastField, Form, Field } from 'formik';\r\nimport UserApi from '../../api/UserApi'\r\nimport * as Yup from 'yup';\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\n\r\nconst User = (props) => {\r\n\r\n  const getListUsers = props.getListUserAction;\r\n  const size = props.size;\r\n\r\n  const showSuccessNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 2500,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.success(title, message, options);\r\n  }\r\n\r\n  const showWrongNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 2500,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.error(title, message, options);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getListUsers(1, size);\r\n  }, [getListUsers, size]);\r\n\r\n  // create\r\n  const [isOpenModalCreate, setOpenModalCreate] = useState(false);\r\n\r\n  // update\r\n  const [updateUserInfo, setUpdateUserInfo] = useState({});\r\n  const [isOpenModalUpdate, setOpenModalUpdate] = useState(false);\r\n\r\n  const updateUser = async (userID) => {\r\n    setOpenModalUpdate(true);\r\n    const data = await UserApi.getById(userID);\r\n    setUpdateUserInfo(data.details.user);\r\n  }\r\n\r\n  const actionFormatter = (cell, row, rowIndex) => {\r\n    return (\r\n      <>\r\n        <Edit2 className=\"align-middle mr-2\" size={18}\r\n          onClick={() => updateUser(row.id)}\r\n        />\r\n        {\" \"}\r\n        <Icon.Trash className=\"align-middle mr-2\" size={18}\r\n          onClick={() => deleteUser(row.id)}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n  // delete \r\n  const deleteUser = async (id) => {\r\n    let result = window.confirm(\"Do you want to delete this ?\");\r\n    if (result) {\r\n      if (id === null || id === undefined) {\r\n        showWrongNotification(\r\n          \"Delete User\",\r\n          \"Sorry, Cann't Delete\"\r\n        );\r\n      } else {\r\n        try {\r\n          await UserApi.deleteById(id);\r\n          // show notification\r\n          showSuccessNotification(\r\n            \"Delete User\",\r\n            \"Delete User Successfully!\");\r\n          // reload group page\r\n          refreshForm();\r\n        } catch (error) {\r\n          showWrongNotification(\r\n            \"Delete User\",\r\n            error.data.message\r\n          );\r\n        }\r\n      }\r\n    }\r\n    refreshForm();\r\n  }\r\n  const deleteUsers = async () => {\r\n    let result = window.confirm(\"Do you want to delete all selected rows ?\");\r\n    if (result) {\r\n      if (props.selectedRows === null || props.selectedRows === undefined || props.selectedRows.length === 0) {\r\n        showWrongNotification(\r\n          \"Delete User\",\r\n          \"You have not selected the user!\"\r\n        );\r\n      } else {\r\n        await props.selectedRows.forEach(element => {\r\n          UserApi.deleteById(element);\r\n          console.log(\"Xóa phần tử thứ \" + element);\r\n        });\r\n        // show notification\r\n        showSuccessNotification(\r\n          \"Delete User\",\r\n          \"Delete User Successfully!\");\r\n        // reload User page\r\n        refreshForm();\r\n      }\r\n    }\r\n    refreshForm();\r\n  }\r\n\r\n  const handleOnSelect = (row, isSelect) => {\r\n    let selected = props.selectedRows;\r\n    if (isSelect) {\r\n      selected = [...selected, row.id]\r\n    } else {\r\n      selected = selected.filter(x => x !== row.id)\r\n    }\r\n    console.log(selected);\r\n    props.updateSelectedRowsAction(selected)\r\n  }\r\n  const handleOnSelectAll = (isSelect, rows) => {\r\n    const ids = rows.map(r => r.id);\r\n    let selected = [];\r\n    if (isSelect) {\r\n      selected = ids;\r\n    }\r\n    props.updateSelectedRowsAction(selected);\r\n  }\r\n\r\n  const tableColumns = [\r\n    {\r\n      dataField: \"id\",\r\n      text: \"Id\",\r\n      sort: true,\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n      headerStyle: () => {\r\n        return {\r\n          textAlign: 'center',\r\n          width: '55px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"username\",\r\n      text: \"UserName\",\r\n      sort: true,\r\n      headerStyle: () => {\r\n        return {\r\n          width: '120px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"fullname\",\r\n      text: \"FullName\",\r\n      sort: true,\r\n      headerStyle: () => {\r\n        return {\r\n          width: '140px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"age\",\r\n      text: \"Age\",\r\n      sort: true,\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n      headerStyle: () => {\r\n        return {\r\n          textAlign: 'center',\r\n          width: '75px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"address\",\r\n      text: \"Address\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"phone\",\r\n      text: \"Phone\",\r\n      sort: true,\r\n      headerStyle: () => {\r\n        return {\r\n          textAlign: 'center',\r\n          width: '120px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"email\",\r\n      text: \"Email\",\r\n      sort: true,\r\n      headerStyle: () => {\r\n        return {\r\n          textAlign: 'center',\r\n          width: '220px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"actions\",\r\n      text: \"Actions\",\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n      headerStyle: () => {\r\n        return { textAlign: 'center', width: '90px' };\r\n      },\r\n      formatter: actionFormatter\r\n    }\r\n  ];\r\n\r\n  const handleTableChange = (type, { page, sizePerPage, sortField, sortOrder, searchText }) => {\r\n    getListUsers(page, sizePerPage, sortField, sortOrder, searchText);\r\n  }\r\n\r\n\r\n  const refreshForm = () => {\r\n    handleTableChange(\r\n      null,\r\n      {\r\n        page: 1,\r\n        sizePerPage: size,\r\n        sortField: \"id\",\r\n        sortOrder: \"asc\",\r\n        searchText: \"\",\r\n      }\r\n    );\r\n    props.updateSelectedRowsAction([]);\r\n  }\r\n\r\n  return (\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">User Management</h1>\r\n      <Card>\r\n        <CardBody>\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={props.users}\r\n            columns={tableColumns}\r\n            search\r\n          >\r\n            {\r\n              toolkitprops => (\r\n                <>\r\n                  {/* Search */}\r\n                  <Row style={{ alignItems: \"flex-end\" }}>\r\n                    <Col xs=\"9\">\r\n                      <CustomSearch {...toolkitprops.searchProps} />\r\n                    </Col>\r\n                    <Col xs=\"3\" style={{ paddingBottom: 20 }}>\r\n                      <div className=\"float-right pull-right\">\r\n                        {/* <Icon.Filter className=\"align-middle mr-3\" color=\"black\" size={25} /> */}\r\n                        <Icon.RefreshCcw className=\"align-middle mr-3\" color=\"black\" size={25} onClick={refreshForm} />\r\n                        <Icon.PlusCircle className=\"align-middle mr-3\" color=\"black\" size={25} onClick={() => setOpenModalCreate(true)} />\r\n                        <Icon.Trash2 className=\"align-middle mr-3\" color=\"black\" size={25} onClick={deleteUsers} />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                  <BootstrapTable\r\n                    {...toolkitprops.baseProps}\r\n                    bootstrap4\r\n                    striped\r\n                    hover\r\n                    bordered\r\n                    remote\r\n                    sort={{\r\n                      dataField: props.sortField,\r\n                      order: props.sortType\r\n                    }}\r\n                    pagination={paginationFactory({\r\n                      page: props.page,\r\n                      totalSize: props.totalElement,\r\n                      sizePerPage: props.size,\r\n\r\n                      nextPageText: '>',\r\n                      prePageText: '<',\r\n                      withFirstAndLast: true,\r\n                      alwaysShowAllBtns: true,\r\n\r\n                      hideSizePerPage: true,\r\n\r\n                    })}\r\n                    selectRow={{\r\n                      mode: 'checkbox',\r\n                      clickToSelect: true,\r\n                      selected: props.selectedRows,\r\n                      onSelect: handleOnSelect,\r\n                      onSelectAll: handleOnSelectAll\r\n                    }}\r\n                    onTableChange={handleTableChange}\r\n                  />\r\n                </>\r\n              )\r\n            }\r\n          </ToolkitProvider>\r\n        </CardBody>\r\n      </Card>\r\n\r\n      <Modal isOpen={isOpenModalCreate} style={{ maxWidth: '1050px', width: '100%' }}>\r\n        <Formik\r\n          enableReinitialize\r\n          initialValues={\r\n            {\r\n              username: '',\r\n              password: '',\r\n              fullname: '',\r\n              age: '',\r\n              address: '',\r\n              phone: '',\r\n              email: '',\r\n              citizenId: '',\r\n              prioritize: '',\r\n            }\r\n          }\r\n          validationSchema={\r\n            Yup.object({\r\n              username: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 6 to 50 characters')\r\n                .min(6, 'Must be between 6 to 50 characters'),\r\n              password: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 6 to 50 characters')\r\n                .min(6, 'Must be between 6 to 50 characters'),\r\n              fullname: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 6 to 50 characters')\r\n                .min(6, 'Must be between 6 to 50 characters'),\r\n              age: Yup.number()\r\n                .required('Required')\r\n                .min(12, 'Must be higher than 12'),\r\n              phone: Yup.string()\r\n                .required()\r\n                .matches(/^[0-9]+$/, \"Must be only digits\")\r\n                .min(10, 'Must be exactly 10 digits')\r\n                .max(10, 'Must be exactly 10 digits'),\r\n              citizenId: Yup.string()\r\n                .required()\r\n                .matches(/^[0-9]+$/, \"Must be only digits\")\r\n                .min(9, 'Must be from 9 to 20 digits')\r\n                .max(20, 'Must be from 9 to 20  digits'),\r\n              email: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 6 to 50 characters')\r\n                .min(6, 'Must be between 6 to 50 characters')\r\n                .email('Invalid email address'),\r\n              address: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 6 to 50 characters')\r\n                .min(6, 'Must be between 6 to 50 characters'),\r\n              prioritize: Yup.number()\r\n                .required('Required')\r\n                .max(2, 'Must be between 0 to 2')\r\n                .min(0, 'Must be between 0 to 2')\r\n            })\r\n          }\r\n          onSubmit={\r\n            async values => {\r\n              console.log(values);\r\n              try {\r\n                // call api\r\n                await UserApi.create(/*updateUserInfo.id,*/ values.username, values.password, values.typeAccount, values.fullname, values.age, values.address, values.phone, values.email, values.citizenId, values.prioritize);\r\n                setOpenModalCreate(false);\r\n                console.log(values);\r\n                // // show notification\r\n                showSuccessNotification(\r\n                  \"Create User\",\r\n                  \"Create User Successfully!\");\r\n                // reload page\r\n                refreshForm();\r\n\r\n              } catch (error) {\r\n                showWrongNotification(\r\n                  \"Create Error\",\r\n                  error.data.message);\r\n                console.log(error);\r\n                // setOpenModalCreate(false);\r\n                // event.preventDefault();\r\n              }\r\n              // }\r\n            }\r\n          }\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form size=\"lg\" >\r\n              {/* header */}\r\n              <ModalHeader>\r\n                Create New User\r\n              </ModalHeader>\r\n              {/* body */}\r\n              <ModalBody >\r\n                <Row style={{ height: '7px' }}>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    Username:\r\n                  </Col>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    Fullname:\r\n                  </Col>\r\n                </Row>\r\n                <Row >\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"username\"\r\n                      placeholder=\"Enter Username\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"fullname\"\r\n                      placeholder=\"Enter Fullname\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row style={{ height: '7px' }}>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    Password:\r\n                  </Col>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    TypeAccount:\r\n                  </Col>\r\n                </Row>\r\n                <Row >\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      placeholder=\"Enter password\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    <FastField as=\"select\" bsSize=\"lg\" type=\"select\" name=\"typeAccount\" component={ReactstrapInput}>\r\n                      <option value=\"ROLE_USER\">User</option>\r\n                      <option value=\"ROLE_MOD\">Mod</option>\r\n                      <option value=\"ROLE_ADMIN\">Admin</option>\r\n                    </FastField>\r\n                  </Col>\r\n                </Row>\r\n                <Row style={{ height: '7px' }}>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    Age:\r\n                  </Col>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    Address:\r\n                  </Col>\r\n                </Row>\r\n                <Row >\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"number\"\r\n                      name=\"age\"\r\n                      placeholder=\"Enter Age\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"address\"\r\n                      placeholder=\"Enter Address\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row style={{ height: '7px' }}>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    Phone:\r\n                  </Col>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    Email:\r\n                  </Col>\r\n                </Row>\r\n                <Row >\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"phone\"\r\n                      placeholder=\"Enter Phone Number\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"email\"\r\n                      placeholder=\"Enter Email\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row style={{ height: '7px' }}>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    CitizenID:\r\n                  </Col>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    Prioritize:\r\n                  </Col>\r\n                </Row>\r\n                <Row >\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"citizenId\"\r\n                      placeholder=\"Enter CitizenID\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                  <Col md=\"6\" style={{ paddingLeft: '20px' }}>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"number\"\r\n                      name=\"prioritize\"\r\n                      placeholder=\"Enter Prioritize\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </ModalBody >\r\n              {/* footer */}\r\n              < ModalFooter >\r\n                {/* resend */}\r\n                < Button\r\n                  type=\"submit\"\r\n                  color=\"primary\"\r\n                  disabled={isSubmitting}\r\n                >\r\n                  Save\r\n                </ Button>\r\n                {\" \"}\r\n                {/* login */}\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setUpdateUserInfo(null);\r\n                    setOpenModalCreate(false);\r\n                  }\r\n                  }\r\n                >\r\n                  Close\r\n                </Button>\r\n              </ModalFooter >\r\n            </Form >\r\n          )}\r\n        </Formik >\r\n      </Modal >\r\n\r\n      <Modal isOpen={isOpenModalUpdate} >\r\n        <Formik\r\n          enableReinitialize\r\n          initialValues={\r\n            {\r\n              fullname: updateUserInfo ? updateUserInfo.fullname : '',\r\n              age: updateUserInfo ? updateUserInfo.age : '',\r\n              address: updateUserInfo ? updateUserInfo.address : '',\r\n              phone: updateUserInfo ? updateUserInfo.phone : '',\r\n              citizenId: updateUserInfo ? updateUserInfo.citizenId : '',\r\n            }\r\n          }\r\n          validationSchema={\r\n            Yup.object({\r\n              fullname: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 6 to 50 characters')\r\n                .min(6, 'Must be between 6 to 50 characters'),\r\n              age: Yup.number()\r\n                .required('Required')\r\n                .min(12, 'Must be higher than 12'),\r\n              address: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 6 to 50 characters')\r\n                .min(6, 'Must be between 6 to 50 characters'),\r\n              phone: Yup.string()\r\n                .required()\r\n                .matches(/^[0-9]+$/, \"Must be only digits\")\r\n                .min(10, 'Must be exactly 10 digits')\r\n                .max(10, 'Must be exactly 10 digits'),\r\n              citizenId: Yup.string()\r\n                .required()\r\n                .matches(/^[0-9]+$/, \"Must be only digits\")\r\n                .min(9, 'Must be from 9 to 20 digits')\r\n                .max(20, 'Must be from 9 to 20  digits'),\r\n            })\r\n          }\r\n          onSubmit={\r\n            async values => {\r\n              console.log(values);\r\n              try {\r\n                // call api\r\n                await UserApi.update(updateUserInfo.id, values.username, values.password, values.fullname, values.age, values.address, values.phone, values.email, values.citizenId);\r\n                setOpenModalUpdate(false);\r\n                console.log(values);\r\n                // // show notification\r\n                showSuccessNotification(\r\n                  \"Update User\",\r\n                  \"Update User Successfully!\");\r\n                // reload page\r\n                refreshForm();\r\n\r\n              } catch (error) {\r\n                showWrongNotification(\r\n                  \"Update Error\",\r\n                  error.data.message);\r\n                console.log(error);\r\n                setOpenModalUpdate(false);\r\n              }\r\n\r\n            }\r\n          }\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              {/* header */}\r\n              <ModalHeader>\r\n                Update User\r\n              </ModalHeader>\r\n              {/* body */}\r\n              <ModalBody>\r\n                <Row>\r\n                  <Col xs=\"3\">\r\n                    <Row style={{ paddingLeft: '20px', paddingTop: '30px', height: '100px' }}>\r\n                      Fullname:\r\n                    </Row>\r\n                    <Row style={{ paddingLeft: '20px', height: '82px' }}>\r\n                      Age:\r\n                    </Row>\r\n                    <Row style={{ paddingLeft: '20px', height: '70px' }}>\r\n                      Address:\r\n                    </Row>\r\n                    <Row style={{ paddingLeft: '20px', height: '70px' }}>\r\n                      Phone:\r\n                    </Row>\r\n                    <Row style={{ paddingLeft: '20px', height: '70px' }}>\r\n                      CitizenID:\r\n                    </Row>\r\n                  </Col>\r\n                  <Col xs=\"9\">\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"fullname\"\r\n                      placeholder=\"Enter Fullname\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"number\"\r\n                      name=\"age\"\r\n                      placeholder=\"Enter Age\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"address\"\r\n                      placeholder=\"Enter Address\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"phone\"\r\n                      placeholder=\"Enter Phone Number\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"number\"\r\n                      name=\"citizenId\"\r\n                      placeholder=\"Enter CitizenID\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </ModalBody >\r\n              {/* footer */}\r\n              < ModalFooter >\r\n                {/* resend */}\r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"primary\"\r\n                  disabled={isSubmitting}\r\n                >\r\n                  Save\r\n                </Button>\r\n                {\" \"}\r\n                {/* login */}\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setUpdateUserInfo(null);\r\n                    setOpenModalUpdate(false);\r\n                  }\r\n                  }\r\n                >\r\n                  Close\r\n                </Button>\r\n              </ModalFooter >\r\n            </Form >\r\n          )}\r\n        </Formik >\r\n      </Modal >\r\n    </Container >\r\n  )\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n  return {\r\n    users: selectListUser(state),\r\n    page: selectPage(state),\r\n    size: selectSize(state),\r\n    sortField: selectSortField(state),\r\n    sortType: selectSortType(state),\r\n    totalElement: selectTotalElement(state),\r\n    selectedRows: selectSelectedRows(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapGlobalStateToProps, { getListUserAction, updateSelectedRowsAction })(User);\r\n"],"sourceRoot":""}