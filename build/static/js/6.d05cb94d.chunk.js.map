{"version":3,"sources":["pages/vaccine/CustomSearch.js","api/VaccineApi.js","redux/actions/vaccineActions.js","pages/vaccine/Vaccine.js","redux/selectors/vaccineSelector.js"],"names":["connect","state","search","selectSearch","props","key","Date","parse","enableReinitialize","initialValues","onSubmit","values","onSearch","Row","style","alignItems","Col","xs","bsSize","type","name","placeholder","component","ReactstrapInput","InputGroupAddon","addonType","color","Button","onClick","url","api","getAll","page","size","sortField","sortType","undefined","requestParams","sort","Api","get","params","create","vaccineName","description","price","amount","expiryDate","manufacture","body","console","log","post","update","id","put","getById","deleteById","delete","listVaccineAction","vaccines","totalElement","types","payload","selectListVaccine","selectPage","selectSize","selectSortField","selectSortType","selectTotalElement","selectedRows","selectSelectedRows","getListVaccineAction","dispatch","a","VaccineApi","json","details","totalElements","updateSelectedRowsAction","showSuccessNotification","title","message","toastr","success","timeOut","showCloseButton","progressBar","position","showWrongNotification","error","getListVaccines","useEffect","useState","isOpenModalCreate","setOpenModalCreate","updateVaccineInfo","setUpdateVaccineInfo","updateVaccine","vaccineID","data","vaccine","split","deleteVaccine","window","confirm","refreshForm","deleteVaccines","length","forEach","element","handleOnSelect","row","isSelect","selected","filter","x","handleOnSelectAll","rows","ids","map","r","handleTableChange","sizePerPage","sortOrder","searchText","tableColumns","dataField","text","align","headerStyle","textAlign","width","formatter","cell","rowIndex","className","Container","fluid","Card","CardBody","keyField","columns","toolkitprops","searchProps","paddingBottom","baseProps","bootstrap4","striped","hover","bordered","remote","order","pagination","paginationFactory","totalSize","nextPageText","prePageText","withFirstAndLast","alwaysShowAllBtns","hideSizePerPage","selectRow","mode","clickToSelect","onSelect","onSelectAll","onTableChange","Modal","isOpen","startDate","validationSchema","Yup","required","max","min","isSubmitting","ModalHeader","ModalBody","paddingLeft","paddingTop","height","format","ModalFooter","disabled","vaccineSelector","selectListVaccineSelector","createSelector","selectPageSelector","selectSizeSelector","selectTotalElementSelector","selectSearchSelector","selectSelectedRowsSelector","selectSortFieldSelector","selectSortTypeSelector"],"mappings":"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","file":"static/js/6.d05cb94d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroupAddon\r\n} from \"reactstrap\";\r\nimport { selectSearch } from \"../../redux/selectors/vaccineSelector\";\r\nimport { connect } from \"react-redux\";\r\nimport { Formik, FastField, Form } from 'formik';\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\n\r\nconst CustomSearch = (props) => {\r\n\r\n    const resetSearch = () => {\r\n        props.onSearch(\"\");\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            key={Date.parse(new Date())}    // fix bug: not-re-render when initialValues changing\r\n            enableReinitialize\r\n            initialValues={\r\n                {\r\n                    search: props.search ? props.search : \"\"\r\n                }\r\n            }\r\n            onSubmit={\r\n                values => {\r\n                    props.onSearch(values.search);\r\n                }\r\n            }\r\n        >\r\n            <Form>\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                    <Col xs=\"auto\">\r\n                        <FastField\r\n                            bsSize=\"lg\"\r\n                            type=\"text\"\r\n                            name=\"search\"\r\n                            placeholder=\"Search Vaccine Info\"\r\n                            component={ReactstrapInput}\r\n                        />\r\n                    </Col>\r\n                    <Col xs=\"auto\">\r\n                        <InputGroupAddon addonType=\"append\" color=\"primary\">\r\n                            <Button type=\"submit\">Search!</Button>\r\n                        </InputGroupAddon>                  \r\n                    </Col>\r\n                    <Col xs=\"auto\">                   \r\n                        <InputGroupAddon addonType=\"append\" color=\"primary\">\r\n                            <Button type=\"submit\" color=\"danger\" onClick = {resetSearch}>Reset Search!</Button>\r\n                        </InputGroupAddon>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n    return {\r\n        search: selectSearch(state)\r\n    };\r\n};\r\n\r\nexport default connect(mapGlobalStateToProps)(CustomSearch);","import Api from './Api';\r\n\r\nconst url = \"/vaccines\";\r\n\r\nconst getAll = (page, size,sortField, sortType, search) => {    \r\n     // default parameters\r\n     if (sortField === null || sortField === undefined || sortType === null || sortType === undefined) {\r\n        sortField = \"id\";\r\n        sortType = \"asc\";\r\n    }\r\n\r\n    const requestParams = {\r\n        page,\r\n        size,\r\n        sort: `${sortField},${sortType}`,\r\n        search,\r\n    }\r\n    return Api.get(`${url}`, {params: requestParams});\r\n};\r\n\r\nconst create = (vaccineName,description,price,amount,expiryDate,manufacture) => {\r\n    const body = {\r\n        vaccineName,description,price,amount,\r\n        expiryDate: expiryDate +\" 00:00\",\r\n        manufacture\r\n    }\r\n    console.log(body);\r\n    return Api.post(url, body);\r\n};\r\n\r\nconst getById = (id) => {\r\n    return Api.get(`${url}/${id}`);\r\n};\r\n\r\nconst deleteById = (id) => {\r\n    return Api.delete(`${url}/${id}`);\r\n};\r\n\r\nconst update = (id, vaccineName,description,price,amount,expiryDate,manufacture) => {\r\n    const body = {\r\n        vaccineName,description,price,amount,\r\n        expiryDate: expiryDate +\" 00:00\"\r\n        ,manufacture\r\n    }\r\n    return Api.put(`${url}/${id}`, body);\r\n};\r\n\r\n// export\r\nconst api = { getAll,create,update,getById,deleteById}\r\nexport default api;","import * as types from \"../constants\";\r\nimport VaccineApi from '../../api/VaccineApi';\r\n\r\nconst listVaccineAction = (vaccines, page, totalElement, sortField,sortType,  search) => {\r\n  return {\r\n    type: types.GET_LIST_VACCINES,\r\n    payload: {\r\n      vaccines,\r\n      page,\r\n      totalElement,\r\n      sortField,\r\n      sortType,\r\n      search, \r\n    }\r\n  };\r\n}\r\n\r\nexport const getListVaccineAction = (page, size,sortField, sortType, search,) => {\r\n  return async dispatch => {\r\n    try {\r\n      const json = await VaccineApi.getAll(page, size,sortField, sortType, search);\r\n      const vaccines = json.details.vaccines;\r\n      const totalElement = json.details.totalElements;\r\n      dispatch(listVaccineAction(vaccines, page, totalElement));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateSelectedRowsAction = (selectedRows) => {\r\n  return {\r\n    type: types.GET_LIST_VACCINE_SELECTED_ROWS,\r\n    payload: selectedRows\r\n  };\r\n}","import React, { useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Button,\r\n  Modal\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport filterFactory, { customFilter } from 'react-bootstrap-table2-filter';\r\nimport CustomSearch from './CustomSearch';\r\nimport * as Icon from \"react-feather\";\r\nimport { useState } from \"react\";\r\nimport { getListVaccineAction, updateSelectedRowsAction } from '../../redux/actions/vaccineActions';\r\nimport { selectListVaccine, selectPage, selectSize, selectSortField, selectSortType, selectTotalElement, selectSelectedRows } from '../../redux/selectors/vaccineSelector';\r\nimport { Formik, FastField, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\nimport VaccineApi from '../../api/VaccineApi';\r\nimport { toastr } from \"react-redux-toastr\";\r\nimport { Edit2 } from \"react-feather\";\r\n\r\n\r\nconst Vaccine = (props) => {\r\n\r\n  const showSuccessNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 5000,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.success(title, message, options);\r\n  }\r\n\r\n  const showWrongNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 5000,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.error(title, message, options);\r\n  }\r\n\r\n  const getListVaccines = props.getListVaccineAction;\r\n  const size = props.size;\r\n\r\n  useEffect(() => {\r\n    getListVaccines(1, size);\r\n  }, [getListVaccines, size]);\r\n\r\n  // create\r\n  const [isOpenModalCreate, setOpenModalCreate] = useState(false);\r\n\r\n  // update\r\n  const [updateVaccineInfo, setUpdateVaccineInfo] = useState(null);\r\n  const updateVaccine = async (vaccineID) => {\r\n    setOpenModalCreate(true);\r\n    const data = await VaccineApi.getById(vaccineID);\r\n    data.details.vaccine.expiryDate = data.details.vaccine.expiryDate.split(\" \", 1);\r\n    console.log(data);\r\n    setUpdateVaccineInfo(data.details.vaccine);\r\n  }\r\n\r\n  const actionFormatter = (cell, row, rowIndex) => {\r\n    return (\r\n      <>\r\n        <Edit2 className=\"align-middle mr-2\" size={18}\r\n          onClick={() => updateVaccine(row.id)}\r\n        />\r\n        {\" \"}\r\n        <Icon.Trash className=\"align-middle mr-2\" size={18}\r\n          onClick={() => deleteVaccine(row.id)}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  // delete \r\n  const deleteVaccine = async (id) => {\r\n    let result = window.confirm(\"Do you want to delete this ?\");\r\n    if (result) {\r\n      if (id === null || id === undefined) {\r\n        showWrongNotification(\r\n          \"Delete Vaccine\",\r\n          \"Sorry, Cann't Delete\"\r\n        );\r\n      } else {\r\n        try {\r\n        await VaccineApi.deleteById(id);\r\n           // show notification\r\n        showSuccessNotification(\r\n          \"Delete Vaccine\",\r\n          \"Delete Vaccine Successfully!\");\r\n        // reload group page\r\n        refreshForm();\r\n        } catch (error) {\r\n          showWrongNotification(\r\n            \"Delete Vaccine\",\r\n            error.data.message\r\n          );\r\n        }\r\n      }\r\n    }\r\n    refreshForm();\r\n  }\r\n  const deleteVaccines = async () => {\r\n    let result = window.confirm(\"Do you want to delete all selected rows ?\");\r\n    if (result) {\r\n      if (props.selectedRows === null || props.selectedRows === undefined || props.selectedRows.length === 0) {\r\n        showWrongNotification(\r\n          \"Delete Vaccine\",\r\n          \"You have not selected the vaccine!\"\r\n        );\r\n      } else {\r\n        await props.selectedRows.forEach(element => {\r\n          VaccineApi.deleteById(element);\r\n          console.log(\"Xóa phần tử thứ \" + element);\r\n        });\r\n        // show notification\r\n        showSuccessNotification(\r\n          \"Delete Vaccine\",\r\n          \"Delete Vaccine Successfully!\");\r\n        // reload vaccine page\r\n        refreshForm();\r\n      }\r\n    }\r\n    refreshForm();\r\n  }\r\n\r\n  const handleOnSelect = (row, isSelect) => {\r\n    let selected = props.selectedRows;\r\n    if (isSelect) {\r\n      selected = [...selected, row.id]\r\n    } else {\r\n      selected = selected.filter(x => x !== row.id)\r\n    }\r\n    console.log(selected);\r\n    props.updateSelectedRowsAction(selected)\r\n  }\r\n  const handleOnSelectAll = (isSelect, rows) => {\r\n    const ids = rows.map(r => r.id);\r\n    let selected = [];\r\n    if (isSelect) {\r\n      selected = ids;\r\n    }\r\n    props.updateSelectedRowsAction(selected);\r\n  }\r\n\r\n  const handleTableChange = (type, { page, sizePerPage, sortField, sortOrder, searchText }) => {\r\n    getListVaccines(page, sizePerPage, sortField, sortOrder, searchText);\r\n  }\r\n\r\n  // Refresh form \r\n  const refreshForm = () => {\r\n    handleTableChange(\r\n      null,\r\n      {\r\n        page: 1,\r\n        sizePerPage: size,\r\n        sortField: \"id\",\r\n        sortOrder: \"asc\",\r\n        searchText: \"\",\r\n      }\r\n    );\r\n    props.updateSelectedRowsAction([]);\r\n  }\r\n\r\n  const tableColumns = [\r\n    {\r\n      dataField: \"id\",\r\n      text: \"ID\",\r\n      sort: true,\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n      headerStyle: () => {\r\n        return {\r\n          textAlign: 'center',\r\n          width: '57px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"name\",\r\n      text: \"Name\",\r\n      sort: true,\r\n      headerStyle: () => {\r\n        return {\r\n          width: '135px'\r\n        };  \r\n      },\r\n    },\r\n    {\r\n      dataField: \"description\",\r\n      text: \"Description\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"price\",\r\n      text: \"Price\",\r\n      sort: true,\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n      headerStyle: () => {\r\n        return {\r\n          textAlign: 'center',\r\n          width: '95px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"amount\",\r\n      text: \"Amount\",\r\n      sort: true,\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n      headerStyle: () => {\r\n        return {\r\n          textAlign: 'center',\r\n          width: '95px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"manufacture\",\r\n      text: \"Manufacture\",\r\n      sort: true,\r\n      headerStyle: () => {\r\n        return {\r\n          width: '139px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"expiryDate\",\r\n      text: \"ExpiryDate\",\r\n      sort: true,\r\n      headerStyle: () => {\r\n        return {\r\n          width: '150px'\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataField: \"actions\",\r\n      text: \"Actions\",\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n      headerStyle: () => {\r\n        return { textAlign: 'center', width: '90px' };\r\n      },\r\n      formatter: actionFormatter\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Vaccine Management</h1>\r\n      <Card>\r\n        <CardBody>\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={props.vaccines}\r\n            columns={tableColumns}\r\n            search\r\n          >\r\n            {\r\n              toolkitprops => (\r\n                <>\r\n                  {/* Search */}\r\n                  <Row style={{ alignItems: \"flex-end\" }}>\r\n                    <Col xs=\"9\">\r\n                      <CustomSearch {...toolkitprops.searchProps} />\r\n                    </Col>\r\n                    <Col xs=\"3\" style={{ paddingBottom: 20 }}>\r\n                      <div className=\"float-right pull-right\">\r\n                        {/* <Icon.Filter className=\"align-middle mr-3\" color=\"black\" size={25} /> */}\r\n                        <Icon.RefreshCcw className=\"align-middle mr-3\" color=\"black\" size={25} onClick={refreshForm} />\r\n                        <Icon.PlusCircle className=\"align-middle mr-3\" color=\"black\" size={25} onClick={() => setOpenModalCreate(true)} />\r\n                        <Icon.Trash2 className=\"align-middle mr-3\" color=\"black\" size={25} onClick={deleteVaccines} />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                  <BootstrapTable\r\n                    {...toolkitprops.baseProps}\r\n                    bootstrap4\r\n                    striped\r\n                    hover\r\n                    bordered\r\n                    remote\r\n                    sort={{\r\n                      dataField: props.sortField,\r\n                      order: props.sortType\r\n                    }}\r\n                    pagination={paginationFactory({\r\n                      page: props.page,\r\n                      totalSize: props.totalElement,\r\n                      sizePerPage: props.size,\r\n\r\n                      nextPageText: '>',\r\n                      prePageText: '<',\r\n                      withFirstAndLast: true,\r\n                      alwaysShowAllBtns: true,\r\n\r\n                      hideSizePerPage: true,\r\n\r\n                    })}\r\n                    selectRow={{\r\n                      mode: 'checkbox',\r\n                      clickToSelect: true,\r\n                      selected: props.selectedRows,\r\n                      onSelect: handleOnSelect,\r\n                      onSelectAll: handleOnSelectAll\r\n                    }}\r\n                    onTableChange={handleTableChange}\r\n                  />\r\n                </>\r\n              )\r\n            }\r\n          </ToolkitProvider>\r\n        </CardBody>\r\n      </Card>\r\n\r\n      <Modal isOpen={isOpenModalCreate} >\r\n        <Formik\r\n          enableReinitialize\r\n          initialValues={\r\n            {\r\n              vaccineName: updateVaccineInfo ? updateVaccineInfo.name : '',\r\n              description: updateVaccineInfo ? updateVaccineInfo.description : '',\r\n              price: updateVaccineInfo ? updateVaccineInfo.price : '',\r\n              amount: updateVaccineInfo ? updateVaccineInfo.amount : '',\r\n              expiryDate: updateVaccineInfo ? updateVaccineInfo.expiryDate : '',\r\n              manufacture: updateVaccineInfo ? updateVaccineInfo.manufacture : '',\r\n              startDate: new Date(),\r\n            }\r\n          }\r\n          validationSchema={\r\n            Yup.object({\r\n              vaccineName: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 5 to 50 characters')\r\n                .min(5, 'Must be between 5 to 50 characters'),\r\n              description: Yup.string()\r\n                .required('Required')\r\n                .max(255, 'Must be between 5 to 255')\r\n                .min(5, 'Must be between 5 to 255'),\r\n              price: Yup.number()\r\n                .required('Required')\r\n                .min(100, 'Must be higher than 100'),\r\n              amount: Yup.number()\r\n                .required('Required')\r\n                .min(1, 'Must be higher than 1'),\r\n              expiryDate: Yup.date().min(\r\n                Yup.ref('startDate'),\r\n                \"Expiry Date must be in the future\"\r\n              ),\r\n              manufacture: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 5 to 50')\r\n                .min(5, 'Must be between 5 to 50'),\r\n            })\r\n          }\r\n          onSubmit={\r\n            async values => {\r\n              console.log(values);\r\n              if (updateVaccineInfo) {\r\n                try {\r\n                  // call api\r\n                  console.log(updateVaccineInfo);\r\n                  await VaccineApi.update(updateVaccineInfo.id, values.vaccineName, values.description, values.price, values.amount, values.expiryDate, values.manufacture);\r\n                  setOpenModalCreate(false);\r\n                  // // show notification\r\n                  showSuccessNotification(\r\n                    \"Update Vaccine\",\r\n                    \"Update Vaccine Successfully!\");\r\n                  // reload page\r\n                  refreshForm();\r\n                  setUpdateVaccineInfo(null);\r\n                } catch (error) {\r\n                  showWrongNotification(\r\n                    \"Update Error\",\r\n                    error.data.message);\r\n                  console.log(error);\r\n                  // props.history.push(\"/auth/500\");\r\n                }\r\n              } else {\r\n                try {\r\n                  // call api\r\n                  await VaccineApi.create(values.vaccineName, values.description, values.price, values.amount, values.expiryDate, values.manufacture);\r\n                  setOpenModalCreate(false);\r\n                  console.log(values);\r\n                  // // show notification\r\n                  showSuccessNotification(\r\n                    \"Create Vaccine\",\r\n                    \"Create Vaccine Successfully!\");\r\n                  // reload page\r\n                  setUpdateVaccineInfo(null);\r\n                  refreshForm();\r\n\r\n                } catch (error) {\r\n                  showWrongNotification(\r\n                    \"Create Error\",\r\n                    error.data.message);\r\n                  console.log(error);\r\n                  setOpenModalCreate(false);\r\n                  // props.history.push(\"/auth/500\");\r\n                }\r\n              }\r\n            }\r\n          }\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              {/* header */}\r\n              <ModalHeader>\r\n                Create New Vaccine\r\n              </ModalHeader>\r\n              {/* body */}\r\n              <ModalBody>\r\n                <Row>\r\n                  <Col xs=\"3\">\r\n                    <Row style={{paddingLeft: '20px', paddingTop: '30px', height: '100px' }}>\r\n                      Vaccine Name:\r\n                    </Row>\r\n                    <Row  style={{paddingLeft: '20px', height: '80px' }}>\r\n                      Description:\r\n                    </Row>\r\n                    <Row style={{paddingLeft: '20px', height: '70px' }}>\r\n                      Price:\r\n                    </Row>\r\n                    <Row style={{paddingLeft: '20px', height: '80px' }}>\r\n                      Amount:\r\n                    </Row>\r\n                    <Row style={{paddingLeft: '20px', height: '70px' }}>\r\n                      Expiry Date:\r\n                    </Row>\r\n                    <Row style={{paddingLeft: '20px', height: '70px' }}>\r\n                      Manufacture:\r\n                    </Row>\r\n                  </Col>\r\n                  <Col xs=\"9\">\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"vaccineName\"\r\n                      placeholder=\"Enter Vaccine Name\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"description\"\r\n                      placeholder=\"Enter Description\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"number\"\r\n                      name=\"price\"\r\n                      placeholder=\"Enter Price\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"number\"\r\n                      name=\"amount\"\r\n                      placeholder=\"Enter Amount\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"date\"\r\n                      format=\"yyyy-MM-dd HH:mm\"\r\n                      name=\"expiryDate\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"manufacture\"\r\n                      placeholder=\"Enter Manufacture\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </ModalBody >\r\n              {/* footer */}\r\n              < ModalFooter >\r\n                {/* resend */}\r\n                < Button\r\n                  type=\"submit\"\r\n                  color=\"primary\"\r\n                  disabled={isSubmitting}\r\n                >\r\n                  Save\r\n                </ Button>\r\n                {\" \"}\r\n                {/* login */}\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setUpdateVaccineInfo(null);\r\n                    setOpenModalCreate(false);\r\n                  }\r\n                  }\r\n                >\r\n                  Close\r\n                </Button>\r\n              </ModalFooter >\r\n            </Form >\r\n          )}\r\n        </Formik >\r\n      </Modal >\r\n\r\n    </Container >\r\n  )\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n  return {\r\n    vaccines: selectListVaccine(state),\r\n    page: selectPage(state),\r\n    size: selectSize(state),\r\n    sortField: selectSortField(state),\r\n    sortType: selectSortType(state),\r\n    totalElement: selectTotalElement(state),\r\n    selectedRows: selectSelectedRows(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapGlobalStateToProps, { getListVaccineAction, updateSelectedRowsAction })(Vaccine);","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\n/** Selector **/\r\nconst vaccineSelector = (state) => state.vaccine;\r\n\r\nconst selectListVaccineSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.vaccines);\r\n\r\nconst selectPageSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.page);\r\n\r\nconst selectSizeSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.size);\r\n\r\nconst selectTotalElementSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.totalElement);\r\n\r\nconst selectSearchSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.search);\r\n\r\nconst selectSelectedRowsSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.selectedRows);\r\n\r\nconst selectSortFieldSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.sortField);\r\n\r\nconst selectSortTypeSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.sortType);\r\n\r\n/** function */\r\nexport const selectListVaccine = (state) => {\r\n    return selectListVaccineSelector(state);\r\n}\r\n\r\nexport const selectPage = (state) => {\r\n    return selectPageSelector(state);\r\n}\r\n\r\nexport const selectSize = (state) => {\r\n    return selectSizeSelector(state);\r\n}\r\n\r\nexport const selectTotalElement = (state) => {\r\n    return selectTotalElementSelector(state);\r\n}\r\n\r\nexport const selectSearch = (state) => {\r\n    return selectSearchSelector(state);\r\n}\r\n\r\nexport const selectSelectedRows = (state) => {\r\n    return selectSelectedRowsSelector(state);\r\n}\r\n\r\nexport const selectSortField = (state) => {\r\n    return selectSortFieldSelector(state);\r\n}\r\n\r\nexport const selectSortType = (state) => {\r\n    return selectSortTypeSelector(state);\r\n}\r\n"],"sourceRoot":""}