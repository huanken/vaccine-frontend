{"version":3,"sources":["api/RelativeApi.js","pages/vaccination/FormRegisterForRelative.js","pages/vaccination/BookingInjection.js"],"names":["api","register","fullname","age","address","citizenId","dateInjection","body","Api","post","connect","state","props","showWrongNotification","title","message","toastr","error","timeOut","showCloseButton","progressBar","position","useState","date","infoRegister","setInfoRegister","Container","fluid","className","Card","CardHeader","tyle","paddingBottom","style","marginLeft","marginTop","CardBody","paddingTop","enableReinitialize","initialValues","startDate","Date","validationSchema","Yup","required","max","min","matches","onSubmit","values","a","RelativeApi","success","console","log","data","isSubmitting","Row","Col","md","size","offset","label","bsSize","type","name","placeholder","component","ReactstrapInput","align","Button","color","onClick","disabled","BookingInjection","activeTab","setActiveTab","toggle","tab","tabs","id","classnames","active","TabContent","TabPane","tabId"],"mappings":"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","file":"static/js/8.9ceace6b.chunk.js","sourcesContent":["import Api from './Api';\r\n\r\nconst register = (fullname, age, address, citizenId, dateInjection) => {\r\n        const body = {\r\n        fullname: fullname,\r\n        age: age,\r\n        address: address,\r\n        citizenId: citizenId,\r\n        dateInjection: dateInjection +\" 00:00\",\r\n    }\r\n    return Api.post(\"relative\", body);\r\n};\r\n\r\n// export\r\nconst api = { register }\r\nexport default api;","import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport { Formik, FastField, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport RelativeApi from '../../api/RelativeApi';\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\nimport { toastr } from \"react-redux-toastr\";\r\nimport { connect } from 'react-redux';\r\nimport { useState } from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst FormForRelative = (props) => {\r\n  const showSuccessNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 5000,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.success(title, message, options);\r\n  }\r\n\r\n  const showWrongNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 5000,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.error(title, message, options);\r\n  }\r\n\r\n  const [infoRegister, setInfoRegister] = useState({\r\n    fullname: '',\r\n    age: '',\r\n    address: '',\r\n    citizenId: '',\r\n    date: '',\r\n  });\r\n\r\n  return (\r\n    <Container fluid className=\"p-0\">\r\n      <br />\r\n      <br />\r\n      <h1 className=\"h3 mb-3\">Đăng ký cho người thân</h1>\r\n      <Card>\r\n        <CardHeader tyle={{ paddingBottom: \"3px\" }}>\r\n          <br />\r\n          <h4 className=\"card-subtitle text-muted\">\r\n            Lưu ý:\r\n          </h4>\r\n          <ul style={{ marginLeft: \"15px\", marginTop: \"15px\" }}>\r\n            <li> <h6>\r\n              Việc đăng ký thông tin hoàn toàn bảo mật và phục vụ cho chiến dịch tiêm chủng Vắc xin COVID - 19\r\n            </h6> </li>\r\n            <li> <h6>\r\n              Xin vui lòng kiểm tra kỹ các thông tin bắt buộc\r\n            </h6> </li>\r\n            <li> <h6>\r\n              Bằng việc nhấn nút \"Confirm\", bạn hoàn toàn hiểu và đồng ý chịu trách nhiệm với các thông tin đã cung cấp.\r\n            </h6> </li>\r\n          </ul>\r\n        </CardHeader >\r\n        <CardBody style={{ paddingTop: \"0px\" }}>\r\n          <Formik\r\n            enableReinitialize\r\n            initialValues={\r\n              {\r\n                fullname: infoRegister.fullname,\r\n                age: infoRegister.age,\r\n                address: infoRegister.address,\r\n                citizenId: infoRegister.citizenId,\r\n                date: infoRegister.date,\r\n                startDate: new Date(),\r\n              }\r\n            }\r\n            validationSchema={\r\n              Yup.object({\r\n                fullname: Yup.string()\r\n                  .required('Required')\r\n                  .max(50, 'Must be between 5 to 50 characters')\r\n                  .min(5, 'Must be between 5 to 50 characters'),\r\n                address: Yup.string()\r\n                  .required('Required')\r\n                  .max(255, 'Must be between 5 to 255')\r\n                  .min(5, 'Must be between 5 to 255'),\r\n                age: Yup.number()\r\n                  .required('Required')\r\n                  .min(12, 'Must be higher than 12'),\r\n                citizenId: Yup.string()\r\n                  .required()\r\n                  .matches(/^[0-9]+$/, \"Must be only digits\")\r\n                  .min(9, 'Must be from 9 to 20 digits')\r\n                  .max(20, 'Must be from 9 to 20  digits'),\r\n                date: Yup.date().min(\r\n                  Yup.ref('startDate'),\r\n                  \"Expiry Date must be in the future\"\r\n                ),\r\n              })\r\n            }\r\n            onSubmit={\r\n              async values => {\r\n                setInfoRegister(values);\r\n                try {\r\n                  await RelativeApi.register(values.fullname, values.age, values.address, values.citizenId, values.date);\r\n                  // show notification\r\n                  showSuccessNotification(\r\n                    \"Register For Injection\",\r\n                    \"Register For Injection Successfully!\");\r\n                  // reload group page\r\n                  // refreshForm();\r\n                  // props.history.push(\"/injection\");\r\n                  setInfoRegister({\r\n                    fullname: '',\r\n                    age: '',\r\n                    address: '',\r\n                    citizenId: '',\r\n                    date: '',\r\n                  })\r\n                } catch (error) {\r\n                  console.log(error);\r\n                  showWrongNotification(\r\n                    \"Register For Injection Fail!\",\r\n                    error.data.message\r\n                  );\r\n                  // if(error.status === 401 || error.status === 403){\r\n                  //   console.log(error.data.status);\r\n                  //   props.history.push(\"/auth/sign-in\")\r\n                  // }\r\n                }\r\n              }\r\n            }\r\n          >\r\n            {({ isSubmitting }) => (\r\n              <Form>\r\n                <>\r\n                  <Row>\r\n                    <Col md={{ size: \"10\", offset: 1 }}>\r\n                      <FastField\r\n                        label=\"Fullname\"\r\n                        bsSize=\"lg\"\r\n                        type=\"text\"\r\n                        name=\"fullname\"\r\n                        placeholder=\"Enter Fullname\"\r\n                        component={ReactstrapInput}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md={{ size: \"10\", offset: 1 }}>\r\n                      <FastField\r\n                        label=\"Age\"\r\n                        bsSize=\"lg\"\r\n                        type=\"number\"\r\n                        name=\"age\"\r\n                        placeholder=\"Enter Age\"\r\n                        component={ReactstrapInput}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md={{ size: \"10\", offset: 1 }}>\r\n                      <FastField\r\n                        label=\"Address\"\r\n                        bsSize=\"lg\"\r\n                        type=\"text\"\r\n                        name=\"address\"\r\n                        placeholder=\"Enter Address\"\r\n                        component={ReactstrapInput}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md={{ size: \"10\", offset: 1 }}>\r\n                      <FastField\r\n                        label=\"CitizenID\"\r\n                        bsSize=\"lg\"\r\n                        type=\"number\"\r\n                        name=\"citizenId\"\r\n                        placeholder=\"Enter CitizenID\"\r\n                        component={ReactstrapInput}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md={{ size: \"10\", offset: 1 }}>\r\n                      <FastField\r\n                        label=\"Desired date to be injected\"\r\n                        bsSize=\"lg\"\r\n                        type=\"date\"\r\n                        name=\"date\"\r\n                        component={ReactstrapInput}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row style={{ marginTop: \"20px\" }}>\r\n                    <Col md=\"12\" align=\"center\">\r\n                      < Button\r\n                        className=\"align-middle mr-5\"\r\n                        color=\"outline-danger\"\r\n                        size=\"lg\"\r\n                        type=\"button\"\r\n                        onClick={() => setInfoRegister({\r\n                          fullname: '',\r\n                          age: '',\r\n                          address: '',\r\n                          citizenId: '',\r\n                          date: '',\r\n                        })}\r\n                      >\r\n                        Cancel\r\n                      </ Button>\r\n                      < Button\r\n                        className=\"align-middle mr-5\"\r\n                        color=\"outline-dark\"\r\n                        size=\"lg\"\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                      >\r\n                        Confirm\r\n                      </ Button>\r\n                    </Col>\r\n                  </Row>\r\n                </>\r\n              </Form >\r\n            )}\r\n          </Formik>\r\n        </CardBody >\r\n      </Card>\r\n    </Container >\r\n  )\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n  return {\r\n\r\n  };\r\n};\r\n\r\nexport default connect(mapGlobalStateToProps, null)(FormForRelative);\r\n","import React, { useState } from 'react';\r\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Card, Button, CardTitle, CardText, Row, Col } from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport \"../../assets/css/components/BookingInjection.css\";\r\nimport FormForRelative from \"../vaccination/FormRegisterForRelative\"\r\n\r\nconst BookingInjection = (props) => {\r\n  const [activeTab, setActiveTab] = useState('1');\r\n\r\n  const toggle = tab => {\r\n    if(activeTab !== tab) setActiveTab(tab);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div tabs className=\"tabs\">\r\n        <button id = \"nav-tabs1\"\r\n                className={classnames({ active: activeTab === '1' })}\r\n                onClick={() => { toggle('1'); }}\r\n                >\r\n                    Đăng kí cho bản thân\r\n        </button>\r\n        <button id = \"nav-tabs2\"\r\n                className={classnames({ active: activeTab === '2' })}\r\n                onClick={() => { toggle('2'); }}\r\n                >\r\n                    Đăng kí cho người thân\r\n        </button>\r\n      </div>\r\n      <TabContent activeTab={activeTab}>\r\n        <TabPane tabId=\"1\">\r\n         {/* aa */}\r\n        </TabPane>\r\n        <TabPane tabId=\"2\">\r\n          {/* <Row>\r\n            <Col sm=\"6\">\r\n              <Card body>\r\n                <CardTitle>Special Title Treatment</CardTitle>\r\n                <CardText>With supporting text below as a natural lead-in to additional content.</CardText>\r\n                <Button>Go somewhere</Button>\r\n              </Card>\r\n            </Col>\r\n            <Col sm=\"6\">\r\n              <Card body>\r\n                <CardTitle>Special Title Treatment</CardTitle>\r\n                <CardText>With supporting text below as a natural lead-in to additional content.</CardText>\r\n                <Button>Go somewhere</Button>\r\n              </Card>\r\n            </Col>\r\n          </Row> */}\r\n          <FormForRelative/>\r\n        </TabPane>\r\n      </TabContent>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookingInjection;"],"sourceRoot":""}