{"version":3,"sources":["pages/injection/CustomSearch.js","api/InjectionApi.js","redux/actions/injectionActions.js","redux/selectors/injectionSelector.js","pages/injection/Injection.js","redux/selectors/vaccineSelector.js"],"names":["connect","state","search","selectSearch","props","key","Date","parse","enableReinitialize","initialValues","onSubmit","values","onSearch","Row","style","alignItems","Col","xs","bsSize","type","name","placeholder","component","ReactstrapInput","InputGroupAddon","addonType","color","Button","onClick","url","api","getAll","page","size","sortField","sortType","undefined","requestParams","sort","Api","get","params","create","vaccineName","description","price","amount","expiryDate","manufacture","body","console","log","post","update","id","put","getById","deleteById","delete","listInjectionsAction","injections","totalElement","types","payload","injectionSelector","injection","selectListInjectionSelector","createSelector","selectPageSelector","selectSizeSelector","selectTotalElementSelector","selectSelectedRowsSelector","isLoading","selectedRows","selectSortFieldSelector","selectSortTypeSelector","selectListInjection","selectPage","selectSize","selectTotalElement","selectSelectedRows","selectSortField","selectSortType","getListInjectionsAction","dispatch","a","InjectionApi","json","details","updateSelectedRowsAction","showSuccessNotification","title","message","toastr","success","timeOut","showCloseButton","progressBar","position","showWrongNotification","error","getListInjection","useEffect","tableColumns","dataField","text","align","headerStyle","textAlign","width","formatter","actionFormatter","useState","setOpenModalCreate","setUpdateInjectionInfo","updateInjection","injectionID","data","split","cell","row","rowIndex","className","deleteInjection","window","confirm","refreshForm","deleteInjections","length","forEach","element","handleOnSelect","isSelect","selected","filter","x","handleOnSelectAll","rows","ids","map","r","handleTableChange","sizePerPage","sortOrder","searchText","Container","fluid","Card","CardBody","keyField","columns","toolkitprops","searchProps","paddingBottom","baseProps","bootstrap4","striped","hover","bordered","remote","order","pagination","paginationFactory","totalSize","nextPageText","prePageText","withFirstAndLast","alwaysShowAllBtns","hideSizePerPage","selectRow","mode","clickToSelect","onSelect","onSelectAll","onTableChange","vaccineSelector","vaccine","selectListVaccineSelector","vaccines","selectSearchSelector","selectListVaccine"],"mappings":"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","file":"static/js/4.d8a903c1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroupAddon\r\n} from \"reactstrap\";\r\nimport { selectSearch } from \"../../redux/selectors/vaccineSelector\";\r\nimport { connect } from \"react-redux\";\r\nimport { Formik, FastField, Form } from 'formik';\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\n\r\nconst CustomSearch = (props) => {\r\n\r\n    const resetSearch = () => {\r\n        props.onSearch(\"\");\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            key={Date.parse(new Date())}    // fix bug: not-re-render when initialValues changing\r\n            enableReinitialize\r\n            initialValues={\r\n                {\r\n                    search: props.search ? props.search : \"\"\r\n                }\r\n            }\r\n            onSubmit={\r\n                values => {\r\n                    props.onSearch(values.search);\r\n                }\r\n            }\r\n        >\r\n            <Form>\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                    <Col xs=\"auto\">\r\n                        <FastField\r\n                            bsSize=\"lg\"\r\n                            type=\"text\"\r\n                            name=\"search\"\r\n                            placeholder=\"Search Injection Info\"\r\n                            component={ReactstrapInput}\r\n                        />\r\n                    </Col>\r\n                    <Col xs=\"auto\">\r\n                        <InputGroupAddon addonType=\"append\" color=\"primary\">\r\n                            <Button type=\"submit\">Search!</Button>\r\n                        </InputGroupAddon>                  \r\n                    </Col>\r\n                    <Col xs=\"auto\">                   \r\n                        <InputGroupAddon addonType=\"append\" color=\"primary\">\r\n                            <Button type=\"submit\" color=\"danger\" onClick = {resetSearch}>Reset Search!</Button>\r\n                        </InputGroupAddon>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n    return {\r\n        search: selectSearch(state)\r\n    };\r\n};\r\n\r\nexport default connect(mapGlobalStateToProps)(CustomSearch);","import Api from './Api';\r\n\r\nconst url = \"/injections\";\r\n\r\nconst getAll = (page, size,sortField, sortType, search) => {    \r\n    // default parameters\r\n    if (sortField === null || sortField === undefined || sortType === null || sortType === undefined) {\r\n       sortField = \"id\";\r\n       sortType = \"asc\";\r\n   }\r\n\r\n   const requestParams = {\r\n       page,\r\n       size,\r\n       sort: `${sortField},${sortType}`,\r\n       search,\r\n   }\r\n   return Api.get(`${url}`, {params: requestParams});\r\n};\r\n// const getAll = () => {    \r\n//     const parameters = {\r\n//         // page,\r\n//         // size,\r\n//         // sort : `${sortField}, ${sortType}`\r\n//     }\r\n//     return Api.get(`${url}`, {parameters: parameters});\r\n// };\r\n\r\nconst create = (vaccineName,description,price,amount,expiryDate,manufacture) => {\r\n    const body = {\r\n        vaccineName,description,price,amount,\r\n        expiryDate: expiryDate +\" 00:00\",\r\n        manufacture\r\n    }\r\n    console.log(body);\r\n    return Api.post(url, body);\r\n};\r\n\r\nconst getById = (id) => {\r\n    return Api.get(`${url}/${id}`);\r\n};\r\n\r\nconst deleteById = (id) => {\r\n    return Api.delete(`${url}/${id}`);\r\n};\r\n\r\nconst update = (id, vaccineName,description,price,amount,expiryDate,manufacture) => {\r\n    const body = {\r\n        vaccineName,description,price,amount,\r\n        expiryDate: expiryDate +\" 00:00\"\r\n        ,manufacture\r\n    }\r\n    return Api.put(`${url}/${id}`, body);\r\n};\r\n\r\n// export\r\nconst api = { getAll,create,update,getById,deleteById}\r\nexport default api;","import * as types from \"../constants\";\r\nimport InjectionApi from '../../api/InjectionApi';\r\n\r\nconst listInjectionsAction = (injections, page, totalElement, sortField, sortType, search) => {\r\n    return {\r\n        type: types.GET_LIST_INJECTIONS,\r\n        payload: {\r\n            injections,\r\n            page,\r\n            totalElement,\r\n            sortField,\r\n            sortType,\r\n            search,\r\n        }\r\n    };\r\n}\r\n\r\nexport const getListInjectionsAction = (page, size, sortField, sortType, search) => {\r\n    return async dispatch => {\r\n        try {\r\n            const json = await InjectionApi.getAll(page, size, sortField, sortType, search);\r\n            const injections = json.details.injections;\r\n            const totalElement = json.details.injections.totalElement;\r\n            dispatch(listInjectionsAction(injections,page, totalElement));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateSelectedRowsAction = (selectedRows) => {\r\n    return {\r\n      type: types.GET_LIST_INJECTION_SELECTED_ROWS,\r\n      payload: selectedRows\r\n    };\r\n  }","import {createSelector} from \"@reduxjs/toolkit\"\r\n\r\n/** Selector **/\r\nconst injectionSelector = (state) => state.injection; \r\n\r\nconst selectListInjectionSelector = createSelector(\r\n    injectionSelector,\r\n    state => state.injections )\r\nconst selectPageSelector = createSelector(\r\n    injectionSelector,\r\n    state => state.page);\r\n\r\nconst selectSizeSelector = createSelector(\r\n    injectionSelector,\r\n    state => state.size);\r\n\r\nconst selectTotalElementSelector = createSelector(\r\n    injectionSelector ,\r\n    state => state.totalElement);\r\n\r\nconst selectSearchSelector = createSelector(\r\n    injectionSelector ,\r\n    state => state.search);\r\n\r\nconst selectLoadingSelector = createSelector(\r\n    injectionSelector ,\r\n    state => state.isLoading);\r\n\r\nconst selectSelectedRowsSelector = createSelector(\r\n    injectionSelector ,\r\n    state => state.selectedRows);\r\n\r\nconst selectSortFieldSelector = createSelector(\r\n    injectionSelector ,\r\n    state => state.sortField);\r\n\r\nconst selectSortTypeSelector = createSelector(\r\n    injectionSelector ,\r\n    state => state.sortType);\r\n\r\nexport const selectListInjection = (state) => {\r\n    return selectListInjectionSelector(state);\r\n}\r\nexport const selectPage = (state) => {\r\n    return selectPageSelector(state);\r\n}\r\n\r\nexport const selectSize = (state) => {\r\n    return selectSizeSelector(state);\r\n}\r\n\r\nexport const selectTotalElement = (state) => {\r\n    return selectTotalElementSelector(state);\r\n}\r\n\r\n\r\nexport const selectSearch = (state) => {\r\n    return selectSearchSelector(state);\r\n}\r\n\r\nexport const selectSelectedRows = (state) => {\r\n    return selectSelectedRowsSelector(state);\r\n}\r\n\r\nexport const selectLoading = (state) => {\r\n    return selectLoadingSelector(state);\r\n}\r\n\r\nexport const selectSortField = (state) => {\r\n    return selectSortFieldSelector(state);\r\n}\r\n\r\nexport const selectSortType = (state) => {\r\n    return selectSortTypeSelector(state);\r\n}\r\n\r\n\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, {Search} from 'react-bootstrap-table2-toolkit';\r\nimport filterFactory, { customFilter } from 'react-bootstrap-table2-filter';\r\nimport CustomSearch from './CustomSearch';\r\nimport * as Icon from \"react-feather\";\r\nimport { useState } from \"react\";\r\nimport { getListInjectionsAction , updateSelectedRowsAction} from '../../redux/actions/injectionActions';\r\nimport { selectListInjection, selectPage, selectSize, selectSortField, selectSortType, selectTotalElement,selectSelectedRows } from '../../redux/selectors/injectionSelector';\r\nimport InjectionApi from '../../api/InjectionApi';\r\nimport { Edit2 } from \"react-feather\";\r\nimport { toastr } from \"react-redux-toastr\";\r\nconst Injection = (props) => {\r\n\r\n  const showSuccessNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 5000,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.success(title, message, options);\r\n  }\r\n\r\n  const showWrongNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 5000,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.error(title, message, options);\r\n  }\r\n\r\n  const getListInjection = props.getListInjectionsAction;\r\n  const size = props.size\r\n  useEffect(() => {\r\n    getListInjection(1 ,size);\r\n  }, [getListInjection, size]);\r\n\r\n  const tableColumns = [\r\n    {\r\n      dataField: \"id\",\r\n      text: \"Id\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"user.username\",\r\n      text: \"User Name\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"vaccine.name\",\r\n      text: \"Name Vaccine\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"location\",\r\n      text: \"Location\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"dateInjection\",\r\n      text: \"Date Of Injection\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"status\",\r\n      text: \"Status\",\r\n      sort: true\r\n    },   \r\n    {\r\n      dataField: \"actions\",\r\n      text: \"Actions\",\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n      headerStyle: () => {\r\n        return { textAlign: 'center', width: '90px' };\r\n      },\r\n      formatter: actionFormatter\r\n    }\r\n  ];\r\n\r\n  // create\r\n  const [isOpenModalCreate, setOpenModalCreate] = useState(false);\r\n\r\n  // update\r\n  const [updateInjectionInfo, setUpdateInjectionInfo] = useState(null);\r\n  const updateInjection = async (injectionID) => {\r\n    setOpenModalCreate(true);\r\n    const data = await InjectionApi.getById(injectionID);\r\n    data.details.injection.expiryDate = data.details.injection.expiryDate.split(\" \", 1);\r\n    console.log(data);\r\n    setUpdateInjectionInfo(data.details.injection);\r\n  }\r\n\r\n  const actionFormatter = (cell, row, rowIndex) => {\r\n    return (\r\n      <>\r\n        <Edit2 className=\"align-middle mr-2\" size={18}\r\n          onClick={() => updateInjection(row.id)}\r\n        />\r\n        {\" \"}\r\n        <Icon.Trash className=\"align-middle mr-2\" size={18}\r\n          onClick={() => deleteInjection(row.id)}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  // delete \r\n  const deleteInjection = async (id) => {\r\n    let result = window.confirm(\"Do you want to delete this ?\");\r\n    if (result) {\r\n      if (id === null || id === undefined) {\r\n        showWrongNotification(\r\n          \"Delete Injection\",\r\n          \"Sorry, Cann't Delete\"\r\n        );\r\n      } else {\r\n        try {\r\n        await InjectionApi.deleteById(id);\r\n           // show notification\r\n        showSuccessNotification(\r\n          \"Delete Injection\",\r\n          \"Delete Injection Successfully!\");\r\n        // reload group page\r\n        refreshForm();\r\n        refreshForm();\r\n        refreshForm();\r\n        } catch (error) {\r\n          showWrongNotification(\r\n            \"Delete Injection\",\r\n            error.data.message\r\n          );\r\n        }\r\n      }\r\n    }\r\n    refreshForm();\r\n  }\r\n  const deleteInjections = async () => {\r\n    let result = window.confirm(\"Do you want to delete all selected rows ?\");\r\n    if (result) {\r\n      if (props.selectedRows === null || props.selectedRows === undefined || props.selectedRows.length === 0) {\r\n        showWrongNotification(\r\n          \"Delete Injection\",\r\n          \"You have not selected the Injection!\"\r\n        );\r\n      } else {\r\n        await props.selectedRows.forEach(element => {\r\n          InjectionApi.deleteById(element);\r\n          console.log(\"Xóa phần tử thứ \" + element);\r\n        });\r\n        // show notification\r\n        showSuccessNotification(\r\n          \"Delete Injection\",\r\n          \"Delete Injection Successfully!\");\r\n        // reload Injection page\r\n        refreshForm();\r\n        refreshForm();\r\n        refreshForm();\r\n      }\r\n    }\r\n    refreshForm();\r\n  }\r\n\r\n  const handleOnSelect = (row, isSelect) => {\r\n    let selected = props.selectedRows;\r\n    if (isSelect) {\r\n      selected = [...selected, row.id]\r\n    } else {\r\n      selected = selected.filter(x => x !== row.id)\r\n    }\r\n    console.log(selected);\r\n    props.updateSelectedRowsAction(selected)\r\n  }\r\n  const handleOnSelectAll = (isSelect, rows) => {\r\n    const ids = rows.map(r => r.id);\r\n    let selected = [];\r\n    if (isSelect) {\r\n      selected = ids;\r\n    }\r\n    props.updateSelectedRowsAction(selected);\r\n  }\r\n\r\n  const handleTableChange = (type,{ page, sizePerPage, sortField, sortOrder, searchText }) => {\r\n    getListInjection(page, sizePerPage, sortField, sortOrder, searchText);\r\n  }\r\n  \r\n  // Refresh form \r\n  const refreshForm = () => {\r\n    handleTableChange(\r\n      null,\r\n      {\r\n        page: 1,\r\n        sizePerPage: size,\r\n        sortField: \"id\",\r\n        sortOrder: \"asc\",\r\n        searchText: \"\",\r\n      }\r\n    );\r\n    props.updateSelectedRowsAction([]);\r\n  }\r\n\r\n\r\n  return (\r\n    <Container fluid className=\"p-0\">\r\n            <h1 className=\"h3 mb-3\">Injection Management</h1>\r\n            <Card>\r\n        <CardBody>\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={props.injections}\r\n            columns={tableColumns}\r\n            search\r\n          >\r\n            {\r\n              toolkitprops => (\r\n                <>\r\n                  {/* Search */}\r\n                  <Row style={{ alignItems: \"flex-end\" }}>\r\n                    <Col xs=\"9\">\r\n                      <CustomSearch {...toolkitprops.searchProps} />\r\n                    </Col>\r\n                    <Col xs=\"3\" style={{ paddingBottom: 20 }}>\r\n                      <div className=\"float-right pull-right\">\r\n                        {/* <Icon.Filter className=\"align-middle mr-3\" color=\"black\" size={25} /> */}\r\n                        <Icon.RefreshCcw className=\"align-middle mr-3\" color=\"black\" size={25} onClick={refreshForm} />\r\n                        <Icon.PlusCircle className=\"align-middle mr-3\" color=\"black\" size={25} onClick={() => setOpenModalCreate(true)} />\r\n                        <Icon.Trash2 className=\"align-middle mr-3\" color=\"black\" size={25} onClick={deleteInjections} />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                  <BootstrapTable\r\n                    {...toolkitprops.baseProps}\r\n                    bootstrap4\r\n                    striped\r\n                    hover\r\n                    bordered\r\n                    remote\r\n                    sort={{\r\n                      dataField: props.sortField,\r\n                      order: props.sortType\r\n                    }}\r\n                    pagination={paginationFactory({\r\n                      page: props.page,\r\n                      totalSize: props.totalElement,\r\n                      sizePerPage: props.size,\r\n\r\n                      nextPageText: '>',\r\n                      prePageText: '<',\r\n                      withFirstAndLast: true,\r\n                      alwaysShowAllBtns: true,\r\n\r\n                      hideSizePerPage: true,\r\n\r\n                    })}\r\n                    selectRow={{\r\n                      mode: 'checkbox',\r\n                      clickToSelect: true,\r\n                      selected: props.selectedRows,\r\n                      onSelect: handleOnSelect,\r\n                      onSelectAll: handleOnSelectAll\r\n                    }}\r\n                    onTableChange={handleTableChange}\r\n                  />\r\n                </>\r\n              )\r\n            }\r\n          </ToolkitProvider>\r\n        </CardBody>\r\n      </Card>\r\n        </Container >\r\n  )\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n  return {\r\n    injections: selectListInjection(state),\r\n    page: selectPage(state),\r\n    size: selectSize(state),\r\n    sortField: selectSortField(state),\r\n    sortType: selectSortType(state),\r\n    totalElement: selectTotalElement(state),\r\n    selectedRows: selectSelectedRows(state),\r\n  };\r\n \r\n};\r\n\r\nexport default connect(mapGlobalStateToProps, { getListInjectionsAction, updateSelectedRowsAction })(Injection);","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\n/** Selector **/\r\nconst vaccineSelector = (state) => state.vaccine;\r\n\r\nconst selectListVaccineSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.vaccines);\r\n\r\nconst selectPageSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.page);\r\n\r\nconst selectSizeSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.size);\r\n\r\nconst selectTotalElementSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.totalElement);\r\n\r\nconst selectSearchSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.search);\r\n\r\nconst selectSelectedRowsSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.selectedRows);\r\n\r\nconst selectSortFieldSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.sortField);\r\n\r\nconst selectSortTypeSelector = createSelector(\r\n    vaccineSelector,\r\n    state => state.sortType);\r\n\r\n/** function */\r\nexport const selectListVaccine = (state) => {\r\n    return selectListVaccineSelector(state);\r\n}\r\n\r\nexport const selectPage = (state) => {\r\n    return selectPageSelector(state);\r\n}\r\n\r\nexport const selectSize = (state) => {\r\n    return selectSizeSelector(state);\r\n}\r\n\r\nexport const selectTotalElement = (state) => {\r\n    return selectTotalElementSelector(state);\r\n}\r\n\r\nexport const selectSearch = (state) => {\r\n    return selectSearchSelector(state);\r\n}\r\n\r\nexport const selectSelectedRows = (state) => {\r\n    return selectSelectedRowsSelector(state);\r\n}\r\n\r\nexport const selectSortField = (state) => {\r\n    return selectSortFieldSelector(state);\r\n}\r\n\r\nexport const selectSortType = (state) => {\r\n    return selectSortTypeSelector(state);\r\n}\r\n"],"sourceRoot":""}